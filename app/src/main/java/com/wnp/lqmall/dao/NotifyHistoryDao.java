package com.wnp.lqmall.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.simplexx.wnp.repository.entity.NotifyHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "name_history".
*/
public class NotifyHistoryDao extends AbstractDao<NotifyHistory, String> {

    public static final String TABLENAME = "name_history";

    /**
     * Properties of entity NotifyHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property MsgId = new Property(1, String.class, "msgId", false, "MSG_ID");
        public final static Property Uid = new Property(2, Long.class, "uid", false, "UID");
        public final static Property Version = new Property(3, Long.class, "version", false, "VERSION");
        public final static Property Create = new Property(4, java.util.Date.class, "create", false, "CREATE");
    }


    public NotifyHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public NotifyHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"name_history\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"MSG_ID\" TEXT NOT NULL ," + // 1: msgId
                "\"UID\" INTEGER NOT NULL ," + // 2: uid
                "\"VERSION\" INTEGER NOT NULL ," + // 3: version
                "\"CREATE\" INTEGER NOT NULL );"); // 4: create
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"name_history\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NotifyHistory entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
        stmt.bindLong(3, entity.getUid());
        stmt.bindLong(4, entity.getVersion());
        stmt.bindLong(5, entity.getCreate().getTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NotifyHistory entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getMsgId());
        stmt.bindLong(3, entity.getUid());
        stmt.bindLong(4, entity.getVersion());
        stmt.bindLong(5, entity.getCreate().getTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NotifyHistory readEntity(Cursor cursor, int offset) {
        NotifyHistory entity = new NotifyHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // msgId
            cursor.getLong(offset + 2), // uid
            cursor.getLong(offset + 3), // version
            new java.util.Date(cursor.getLong(offset + 4)) // create
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NotifyHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMsgId(cursor.getString(offset + 1));
        entity.setUid(cursor.getLong(offset + 2));
        entity.setVersion(cursor.getLong(offset + 3));
        entity.setCreate(new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NotifyHistory entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NotifyHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NotifyHistory entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
